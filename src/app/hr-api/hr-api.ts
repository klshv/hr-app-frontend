//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    list(pageIndex: number, pageSize: number): Observable<ApplicantListDto> {
        let url_ = this.baseUrl + "/api/Applicant/List?";
        if (pageIndex === undefined || pageIndex === null)
            throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
        else
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApplicantListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApplicantListDto>;
        }));
    }

    protected processList(response: HttpResponseBase): Observable<ApplicantListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicantListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    applicantGET(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Applicant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplicantGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicantGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processApplicantGET(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    applicantPUT(id: number, body?: ApplicantDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Applicant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplicantPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicantPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processApplicantPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return No Content
     */
    applicantDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Applicant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplicantDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicantDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processApplicantDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    applicantPOST(body?: ApplicantCreateDto | undefined): Observable<ApplicantDto> {
        let url_ = this.baseUrl + "/api/Applicant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplicantPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicantPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApplicantDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApplicantDto>;
        }));
    }

    protected processApplicantPOST(response: HttpResponseBase): Observable<ApplicantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ApplicantDto.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    list2(pageIndex: number, pageSize: number): Observable<EmployeeListDto> {
        let url_ = this.baseUrl + "/api/Employee/List?";
        if (pageIndex === undefined || pageIndex === null)
            throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
        else
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EmployeeListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EmployeeListDto>;
        }));
    }

    protected processList2(response: HttpResponseBase): Observable<EmployeeListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmployeeListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    employeeGET(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Employee/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmployeeGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmployeeGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEmployeeGET(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    employeePUT(id: number, body?: EmployeeDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Employee/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmployeePUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmployeePUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEmployeePUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return No Content
     */
    employeeDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Employee/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmployeeDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmployeeDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEmployeeDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    employeePOST(body?: EmployeeCreateDto | undefined): Observable<EmployeeDto> {
        let url_ = this.baseUrl + "/api/Employee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmployeePOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmployeePOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EmployeeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EmployeeDto>;
        }));
    }

    protected processEmployeePOST(response: HttpResponseBase): Observable<EmployeeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = EmployeeDto.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    list3(pageIndex?: number | undefined, pageSize?: number | undefined): Observable<PersonListDto> {
        let url_ = this.baseUrl + "/api/Person/List?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PersonListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PersonListDto>;
        }));
    }

    protected processList3(response: HttpResponseBase): Observable<PersonListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    personGET(id: number): Observable<PersonDto> {
        let url_ = this.baseUrl + "/api/Person/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PersonDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PersonDto>;
        }));
    }

    protected processPersonGET(response: HttpResponseBase): Observable<PersonDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    personPUT(id: number, body?: PersonDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Person/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPersonPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    personDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Person/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPersonDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    personPOST(body?: PersonCreateDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Person";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPersonPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPersonPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPersonPOST(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AddressDto implements IAddressDto {
    street?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    houseNumber?: string | undefined;
    postalCode?: number;
    apartmentNumber?: number;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.street = _data["street"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.houseNumber = _data["houseNumber"];
            this.postalCode = _data["postalCode"];
            this.apartmentNumber = _data["apartmentNumber"];
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["city"] = this.city;
        data["region"] = this.region;
        data["houseNumber"] = this.houseNumber;
        data["postalCode"] = this.postalCode;
        data["apartmentNumber"] = this.apartmentNumber;
        return data;
    }

    clone(): AddressDto {
        const json = this.toJSON();
        let result = new AddressDto();
        result.init(json);
        return result;
    }
}

export interface IAddressDto {
    street?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    houseNumber?: string | undefined;
    postalCode?: number;
    apartmentNumber?: number;
}

export class ApplicantCreateDto implements IApplicantCreateDto {
    position?: string | undefined;
    person?: PersonDto;

    constructor(data?: IApplicantCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.person = data.person && !(<any>data.person).toJSON ? new PersonDto(data.person) : <PersonDto>this.person;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.position = _data["position"];
            this.person = _data["person"] ? PersonDto.fromJS(_data["person"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicantCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["position"] = this.position;
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApplicantCreateDto {
        const json = this.toJSON();
        let result = new ApplicantCreateDto();
        result.init(json);
        return result;
    }
}

export interface IApplicantCreateDto {
    position?: string | undefined;
    person?: IPersonDto;
}

export class ApplicantDto implements IApplicantDto {
    appliedDate?: Date;
    position?: string | undefined;
    decision?: Decision;
    person?: PersonDto;

    constructor(data?: IApplicantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.person = data.person && !(<any>data.person).toJSON ? new PersonDto(data.person) : <PersonDto>this.person;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appliedDate = _data["appliedDate"] ? new Date(_data["appliedDate"].toString()) : <any>undefined;
            this.position = _data["position"];
            this.decision = _data["decision"];
            this.person = _data["person"] ? PersonDto.fromJS(_data["person"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicantDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appliedDate"] = this.appliedDate ? this.appliedDate.toISOString() : <any>undefined;
        data["position"] = this.position;
        data["decision"] = this.decision;
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApplicantDto {
        const json = this.toJSON();
        let result = new ApplicantDto();
        result.init(json);
        return result;
    }
}

export interface IApplicantDto {
    appliedDate?: Date;
    position?: string | undefined;
    decision?: Decision;
    person?: IPersonDto;
}

export class ApplicantListDto implements IApplicantListDto {
    count?: number;
    applicants?: ApplicantShortDto[] | undefined;
  //employees: never[];

    constructor(data?: IApplicantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.applicants) {
                this.applicants = [];
                for (let i = 0; i < data.applicants.length; i++) {
                    let item = data.applicants[i];
                    this.applicants[i] = item && !(<any>item).toJSON ? new ApplicantShortDto(item) : <ApplicantShortDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["applicants"])) {
                this.applicants = [] as any;
                for (let item of _data["applicants"])
                    this.applicants!.push(ApplicantShortDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicantListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.applicants)) {
            data["applicants"] = [];
            for (let item of this.applicants)
                data["applicants"].push(item.toJSON());
        }
        return data;
    }

    clone(): ApplicantListDto {
        const json = this.toJSON();
        let result = new ApplicantListDto();
        result.init(json);
        return result;
    }
}

export interface IApplicantListDto {
    count?: number;
    applicants?: IApplicantShortDto[] | undefined;
}

export class ApplicantShortDto implements IApplicantShortDto {
    id?: number;
    decision?: Decision;
    appliedDate?: Date;
    person?: PersonShortDto;

    constructor(data?: IApplicantShortDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.person = data.person && !(<any>data.person).toJSON ? new PersonShortDto(data.person) : <PersonShortDto>this.person;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.decision = _data["decision"];
            this.appliedDate = _data["appliedDate"] ? new Date(_data["appliedDate"].toString()) : <any>undefined;
            this.person = _data["person"] ? PersonShortDto.fromJS(_data["person"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicantShortDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantShortDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["decision"] = this.decision;
        data["appliedDate"] = this.appliedDate ? this.appliedDate.toISOString() : <any>undefined;
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApplicantShortDto {
        const json = this.toJSON();
        let result = new ApplicantShortDto();
        result.init(json);
        return result;
    }
}

export interface IApplicantShortDto {
    id?: number;
    decision?: Decision;
    appliedDate?: Date;
    person?: IPersonShortDto;
}

export class ContactDataDto implements IContactDataDto {
    email?: string | undefined;
    phoneNumber?: string | undefined;
    homeAddress?: AddressDto;

    constructor(data?: IContactDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.homeAddress = data.homeAddress && !(<any>data.homeAddress).toJSON ? new AddressDto(data.homeAddress) : <AddressDto>this.homeAddress;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.homeAddress = _data["homeAddress"] ? AddressDto.fromJS(_data["homeAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ContactDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["homeAddress"] = this.homeAddress ? this.homeAddress.toJSON() : <any>undefined;
        return data;
    }

    clone(): ContactDataDto {
        const json = this.toJSON();
        let result = new ContactDataDto();
        result.init(json);
        return result;
    }
}

export interface IContactDataDto {
    email?: string | undefined;
    phoneNumber?: string | undefined;
    homeAddress?: IAddressDto;
}

export enum Decision {
    Pending = "Pending",
    Accepted = "Accepted",
    Rejected = "Rejected",
    Interview = "Interview",
}

export class EmployeeCreateDto implements IEmployeeCreateDto {
    hiredDate?: Date;
    salary?: number;
    levelType?: LevelType;
    position?: string | undefined;
    person?: PersonDto;

    constructor(data?: IEmployeeCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.person = data.person && !(<any>data.person).toJSON ? new PersonDto(data.person) : <PersonDto>this.person;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hiredDate = _data["hiredDate"] ? new Date(_data["hiredDate"].toString()) : <any>undefined;
            this.salary = _data["salary"];
            this.levelType = _data["levelType"];
            this.position = _data["position"];
            this.person = _data["person"] ? PersonDto.fromJS(_data["person"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EmployeeCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hiredDate"] = this.hiredDate ? this.hiredDate.toISOString() : <any>undefined;
        data["salary"] = this.salary;
        data["levelType"] = this.levelType;
        data["position"] = this.position;
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        return data;
    }

    clone(): EmployeeCreateDto {
        const json = this.toJSON();
        let result = new EmployeeCreateDto();
        result.init(json);
        return result;
    }
}

export interface IEmployeeCreateDto {
    hiredDate?: Date;
    salary?: number;
    levelType?: LevelType;
    position?: string | undefined;
    person?: IPersonDto;
}

export class EmployeeDto implements IEmployeeDto {
    hiredDate?: Date;
    salary?: number;
    levelType?: LevelType;
    position?: string | undefined;
    person?: PersonDto;

    constructor(data?: IEmployeeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.person = data.person && !(<any>data.person).toJSON ? new PersonDto(data.person) : <PersonDto>this.person;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hiredDate = _data["hiredDate"] ? new Date(_data["hiredDate"].toString()) : <any>undefined;
            this.salary = _data["salary"];
            this.levelType = _data["levelType"];
            this.position = _data["position"];
            this.person = _data["person"] ? PersonDto.fromJS(_data["person"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EmployeeDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hiredDate"] = this.hiredDate ? this.hiredDate.toISOString() : <any>undefined;
        data["salary"] = this.salary;
        data["levelType"] = this.levelType;
        data["position"] = this.position;
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        return data;
    }

    clone(): EmployeeDto {
        const json = this.toJSON();
        let result = new EmployeeDto();
        result.init(json);
        return result;
    }
}

export interface IEmployeeDto {
    hiredDate?: Date;
    salary?: number;
    levelType?: LevelType;
    position?: string | undefined;
    person?: IPersonDto;
}

export class EmployeeListDto implements IEmployeeListDto {
    count?: number;
    employees?: EmployeeShortDto[] | undefined;

    constructor(data?: IEmployeeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.employees) {
                this.employees = [];
                for (let i = 0; i < data.employees.length; i++) {
                    let item = data.employees[i];
                    this.employees[i] = item && !(<any>item).toJSON ? new EmployeeShortDto(item) : <EmployeeShortDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["employees"])) {
                this.employees = [] as any;
                for (let item of _data["employees"])
                    this.employees!.push(EmployeeShortDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EmployeeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.employees)) {
            data["employees"] = [];
            for (let item of this.employees)
                data["employees"].push(item.toJSON());
        }
        return data;
    }

    clone(): EmployeeListDto {
        const json = this.toJSON();
        let result = new EmployeeListDto();
        result.init(json);
        return result;
    }
}

export interface IEmployeeListDto {
    count?: number;
    employees?: IEmployeeShortDto[] | undefined;
}

export class EmployeeShortDto implements IEmployeeShortDto {
    id?: number;
    position?: string | undefined;
    hiredDate?: Date;
    person?: PersonShortDto;

    constructor(data?: IEmployeeShortDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.person = data.person && !(<any>data.person).toJSON ? new PersonShortDto(data.person) : <PersonShortDto>this.person;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.position = _data["position"];
            this.hiredDate = _data["hiredDate"] ? new Date(_data["hiredDate"].toString()) : <any>undefined;
            this.person = _data["person"] ? PersonShortDto.fromJS(_data["person"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EmployeeShortDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeShortDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["position"] = this.position;
        data["hiredDate"] = this.hiredDate ? this.hiredDate.toISOString() : <any>undefined;
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        return data;
    }

    clone(): EmployeeShortDto {
        const json = this.toJSON();
        let result = new EmployeeShortDto();
        result.init(json);
        return result;
    }
}

export interface IEmployeeShortDto {
    id?: number;
    position?: string | undefined;
    hiredDate?: Date;
    person?: IPersonShortDto;
}

export enum LevelType {
    Junior = "Junior",
    Middle = "Middle",
    Senior = "Senior",
}

export class PersonCreateDto implements IPersonCreateDto {
    firstName?: string | undefined;
    patronymic?: string | undefined;
    lastName?: string | undefined;
    birthday?: Date;

    constructor(data?: IPersonCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.patronymic = _data["patronymic"];
            this.lastName = _data["lastName"];
            this.birthday = _data["birthday"] ? new Date(_data["birthday"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["patronymic"] = this.patronymic;
        data["lastName"] = this.lastName;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        return data;
    }

    clone(): PersonCreateDto {
        const json = this.toJSON();
        let result = new PersonCreateDto();
        result.init(json);
        return result;
    }
}

export interface IPersonCreateDto {
    firstName?: string | undefined;
    patronymic?: string | undefined;
    lastName?: string | undefined;
    birthday?: Date;
}

export class PersonDto implements IPersonDto {
    firstName?: string | undefined;
    patronymic?: string | undefined;
    lastName?: string | undefined;
    birthday?: Date;
    contactData?: ContactDataDto;

    constructor(data?: IPersonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.contactData = data.contactData && !(<any>data.contactData).toJSON ? new ContactDataDto(data.contactData) : <ContactDataDto>this.contactData;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.patronymic = _data["patronymic"];
            this.lastName = _data["lastName"];
            this.birthday = _data["birthday"] ? new Date(_data["birthday"].toString()) : <any>undefined;
            this.contactData = _data["contactData"] ? ContactDataDto.fromJS(_data["contactData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["patronymic"] = this.patronymic;
        data["lastName"] = this.lastName;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["contactData"] = this.contactData ? this.contactData.toJSON() : <any>undefined;
        return data;
    }

    clone(): PersonDto {
        const json = this.toJSON();
        let result = new PersonDto();
        result.init(json);
        return result;
    }
}

export interface IPersonDto {
    firstName?: string | undefined;
    patronymic?: string | undefined;
    lastName?: string | undefined;
    birthday?: Date;
    contactData?: IContactDataDto;
}

export class PersonListDto implements IPersonListDto {
    count?: number;
    persons?: PersonShortDto[] | undefined;

    constructor(data?: IPersonListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.persons) {
                this.persons = [];
                for (let i = 0; i < data.persons.length; i++) {
                    let item = data.persons[i];
                    this.persons[i] = item && !(<any>item).toJSON ? new PersonShortDto(item) : <PersonShortDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["persons"])) {
                this.persons = [] as any;
                for (let item of _data["persons"])
                    this.persons!.push(PersonShortDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.persons)) {
            data["persons"] = [];
            for (let item of this.persons)
                data["persons"].push(item.toJSON());
        }
        return data;
    }

    clone(): PersonListDto {
        const json = this.toJSON();
        let result = new PersonListDto();
        result.init(json);
        return result;
    }
}

export interface IPersonListDto {
    count?: number;
    persons?: IPersonShortDto[] | undefined;
}

export class PersonShortDto implements IPersonShortDto {
    id?: number;
    fullName?: string | undefined;

    constructor(data?: IPersonShortDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): PersonShortDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonShortDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        return data;
    }

    clone(): PersonShortDto {
        const json = this.toJSON();
        let result = new PersonShortDto();
        result.init(json);
        return result;
    }
}

export interface IPersonShortDto {
    id?: number;
    fullName?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }

    clone(): ProblemDetails {
        const json = this.toJSON();
        let result = new ProblemDetails();
        result.init(json);
        return result;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}